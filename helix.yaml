name: Confluence Bot
description: "Connect to Confluence and search and retrieve documents using natural language queries"
avatar: https://logowik.com/content/uploads/images/592_confluence.jpg
image: https://logowik.com/content/uploads/images/592_confluence.jpg

assistants:
- apis:
  - name: Confluence API
    description: Connect to Confluence and search and retrieve documents using natural language queries
    url: ${JIRA_HOSTNAME}
    schema: ./oas/confluence-search.yaml
    headers:
      Authorization: Basic ${AUTH_STRING}
    query: {}

    request_prep_template: |
      Your output must be a valid json, without any commentary or additional formatting.

      Examples:

      **User Input:** Get project prj_1234 details
      **OpenAPI schema path:** /projects/{projectId}
      **Verdict:** response should be {"projectId": "prj_1234"}

      **User Input:** List all users with status "active"
      **OpenAPI schema path:** /users/findByStatus
      **OpenAPI schema parameters:** [
        {
          "name": "status",
          "in": "query",
          "description": "Status values that need to be considered for filter",
          "required": true,
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["active", "pending", "sold"],
            "default": "available"
          }
        }
      ]
      **Verdict:** response should be:

      ```json
      {
        "status": "active"
      }
      ```

      **Response Format:** Always respond with JSON without any commentary, wrapped in markdown json tags, for example:
      ```json
      {
        "parameterName": "parameterValue",
        "parameterName2": "parameterValue2"
      }
      ```

      ===END EXAMPLES===

      OpenAPI schema:

      {{.Schema}}

      ===END OPENAPI SCHEMA===

      Based on conversation so far, construct a valid JSON object. In cases where user input does not contain information for a query, DO NOT add that specific query parameter to the output. If a user doesn't provide a required parameter, use sensible defaults for required params, and leave optional params out.
      ONLY use search parameters from the user messages above - do NOT use search parameters provided in the examples.

      Examples of how to specify cql:
      - "of type page and contains text event" -> "type = 'page' and text ~ 'event'"
      - "with label performance and type blogpost" -> "label = 'performance' and type = 'blogpost'"
      - "with title performance and type blogpost" -> "title = 'performance' and type = 'blogpost'"
      - "by user bob" -> "user.fullname ~ 'bob'"
      - "with contributor bob" -> "contributor.fullname ~ 'bob'"

    response_success_template: |
      Present the key information in a concise manner and perform any actions requested by the user.
      Include relevant details, references, and links if present. Format the summary in Markdown for clarity and readability where appropriate, but don't mention formatting in your response unless it's relevant to the user's query.
      Make sure to NEVER mention technical terms like "APIs, JSON, Request, etc..." and use first person pronoun (say it as if you performed the action)

      Issues and tasks mean the same thing.
      IMPORTANT: If the user asks you to write code, you MUST write code. Start by describing the task described in the issue, and then write the code to perform the task.

    response_error_template: |
      As an AI chat assistant, your job is to help the user understand and resolve API error messages.
      When offering solutions, You will clarify without going into unnecessary detail. You must respond in less than 100 words.
      You should commence by saying "An error occurred while trying to process your request ..." also, if you think it's auth error, ask the user to read this doc https://docs.helix.ml/helix/develop/helix-tools/ (format as markdown)

  model: llama3.1:8b-instruct-q8_0
  name: "Confluence Bot"
  description: "Connect to Confluence and search and retrieve documents"
  avatar: "https://logowik.com/content/uploads/images/592_confluence.jpg"
  image: "https://logowik.com/content/uploads/images/592_confluence.jpg"
  provider: ""
  type: text
  system_prompt: ""
  rag_source_id: ""
  lora_id: ""
  knowledge: []
  is_actionable_template: ""
  gptscripts: []
  zapier: []

  # Tests for this assistant
  tests:
  - name: Test Confluence blog post search
    steps:
      - prompt: What's been happening on confluence recently?
        expected_output: Responds with some activity on confluence, specifically a page about "Event-Based System Architecture Design for Order Management System".
  - name: List content from a specific user
    steps:
      - prompt: List pages that Priya Samuel contributed to
        expected_output: Responds with a list of pages that Priya Samuel contributed to, including one page called "Event-Based System Architecture Design for Order Management System".
triggers: []

